<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent 
	xmlns:flexlib="flexlib.containers.*"
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	creationComplete="init()"
	xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="660">
	
		<fx:Style>
		@namespace tab "flexlib.controls.tabBarClasses.*";
		tab|SuperTab{ 
			tabCloseButtonStyleName:"SuperTabButtonStyle"; 
		} 
		.SuperTabButtonStyle{
			icon: Embed(source="close.png");
		}
	</fx:Style>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:SeriesSlide 
			id="slideUp" 
			duration="1000" 
			direction="up"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.report.bi.SemmelReport;
			import com.security.util.AESCrypto;
			import com.semmel.Constants;
			
			import flash.display.NativeMenu;
			import flash.display.NativeMenuItem;
			
			import mx.charts.ChartItem;
			import mx.charts.chartClasses.IAxis;
			import mx.charts.chartClasses.Series;
			import mx.charts.events.ChartItemEvent;
			import mx.charts.series.ColumnSeries;
			import mx.charts.series.items.ColumnSeriesItem;
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.containers.VBox;
			import mx.graphics.IFill;
			import mx.graphics.SolidColor;
			import mx.graphics.Stroke;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectUtil;
			
			import spark.components.Image;
			import spark.events.IndexChangeEvent;
			import spark.events.PopUpEvent;
			
			import flexlib.containers.SuperTabNavigator;
			import flexlib.controls.SuperTabBar;
			import flexlib.controls.tabBarClasses.SuperTab;
			import flexlib.events.TabReorderEvent;
			
			[Bindable]
			private var xmlColumnChart2 : XMLList;
			
			[Bindable]
			private var xmlColumnChart : XMLList;
			
			[Bindable]
			private var xmlDatagrid : XMLListCollection;
			private var yearDatagrid : ArrayCollection = new ArrayCollection([]);
			
			private var year:Number = 0;
			
			
			private var iColorNumber:Number = 0;
			
			//For quater percent by moment.
			
			private var total_bp:Number = 0;
			private var total_ba:Number = 0;
			private var total_af:Number = 0;
			private var total_ap:Number = 0;
			private var total_as:Number = 0;
			private var comp_bp:Number = 0;
			private var comp_ba:Number = 0;
			private var comp_af:Number = 0;
			private var comp_ap:Number = 0;
			private var comp_as:Number = 0;
			private var columnData : Array = [];
			private var columnData1 : Array = [];
			private var depart:String = "";
			private var max:Number = 0;
			private var paragraph:Number = 0;
			
			
			[Embed(source="../../assets/document.png")]
			private var document_icon:Class;       
			
			[Embed(source="../../assets/home.png")]
			private var home_icon:Class;
			
			private function init():void{
				
				var s:String = this.parentApplication.fetchXMLData;
				trace("parent XML: "+ s);
				if(s!=""){
					try{
						var xml:XML = new XML(s);
						this.xmlDatagrid = new XMLListCollection(xml.depts.dept);//.month;
					}catch(e:Error){
						
					}
				}
				var currentDate:Date = new Date();
				this.year = currentDate.getFullYear();
				this.btnYear.prompt = String(year);
				for(var i:Number = 2015; i<=currentDate.getFullYear(); i++)
				{
					this.yearDatagrid.addItem({year:i});
				}
				fetchLocalXML();
			}
			
			public function fetchLocalXML():void{
				
				iColorNumber = 0;
				columnData = [];
				columnData1 = [];

				max = 0;
				var bpQuarter1:Number = 0;
				var baQuarter1:Number = 0;
				var afQuarter1:Number = 0;
				var apQuarter1:Number = 0;
				var asQuarter1:Number = 0;

				var bpQuarter2:Number = 0;
				var baQuarter2:Number = 0;
				var afQuarter2:Number = 0;
				var apQuarter2:Number = 0;
				var asQuarter2:Number = 0;
				
				var bpQuarter3:Number = 0;
				var baQuarter3:Number = 0;
				var afQuarter3:Number = 0;
				var apQuarter3:Number = 0;
				var asQuarter3:Number = 0;
				
				var bpQuarter4:Number = 0;
				var baQuarter4:Number = 0;
				var afQuarter4:Number = 0;
				var apQuarter4:Number = 0;
				var asQuarter4:Number = 0;
				
				var bpQuarter11:Number = 0;
				var baQuarter11:Number = 0;
				var afQuarter11:Number = 0;
				var apQuarter11:Number = 0;
				var asQuarter11:Number = 0;
				
				var bpQuarter21:Number = 0;
				var baQuarter21:Number = 0;
				var afQuarter21:Number = 0;
				var apQuarter21:Number = 0;
				var asQuarter21:Number = 0;
				
				var bpQuarter31:Number = 0;
				var baQuarter31:Number = 0;
				var afQuarter31:Number = 0;
				var apQuarter31:Number = 0;
				var asQuarter31:Number = 0;
				
				var bpQuarter41:Number = 0;
				var baQuarter41:Number = 0;
				var afQuarter41:Number = 0;
				var apQuarter41:Number = 0;
				var asQuarter41:Number = 0;
				if(this.parentApplication.fetchXMLData!=""){
					try{
						trace("year:"+year);
						
						var raw:String = "";
						var s:String = "";
						var file:File = File.applicationStorageDirectory.resolvePath("report_" + Constants.getHospitalId() + "_" + this.parentApplication.selectedYM + ".shard");
						for(var i:Number=0;i<4;i++){
							
							total_bp = 0;total_ba = 0;total_af = 0;total_ap = 0;total_as = 0;
							comp_bp = 0;comp_ba = 0;comp_af = 0;comp_ap = 0;comp_as = 0;
							
							for(var j:Number=1;j<=3;j++){
								var month:Number = i*3 + j;
								var MonthYear:String = year + "" + month;
								var file1:File = File.applicationStorageDirectory.resolvePath("report_" + Constants.getHospitalId() + "_" + MonthYear + ".shard");
								if(file1.exists){
									try{
										var stream:FileStream = new FileStream()
										stream.open(file1, FileMode.READ);
										raw = stream.readUTFBytes(stream.bytesAvailable).toString();
										stream.close();
										
										s = raw;
										var xml:XML = new XML(s);
										
										//-- From here you can get the Compliance Rate by Moment.
										//											depart = btnDepartment.selectedItem.@label;
										
										if(depart=="All"||depart==""){
											if(xml.deptComp.summ_total.(@totalhwhr!="").attribute("totalhwhr")){
												var cnt:Number = 0;
												cnt = (Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hw1"))
													+Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hr1")))
													/(Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hw1"))
														+Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hr1"))
														+Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("miss1"))
														+Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("misswithglove1")))*100;
												if(cnt){total_bp += cnt;}
												
												cnt = (Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hw2"))
													+Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hr2")))
													/(Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hw2"))
														+Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hr2"))
														+Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("miss2"))
														+Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("misswithglove2")))*100;
												if(cnt){total_ba += cnt;}
												
												cnt = (Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hw3"))
													+Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hr3")))
													/(Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hw3"))
														+Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hr3"))
														+Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("miss3"))
														+Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("misswithglove3")))*100;
												if(cnt){total_af += cnt;}
												
												cnt = (Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hw4"))
													+Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hr4")))
													/(Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hw4"))
														+Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hr4"))
														+Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("miss4"))
														+Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("misswithglove4")))*100;
												if(cnt){total_ap += cnt;}
												
												cnt = (Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hw5"))
													+Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hr5")))
													/(Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hw5"))
														+Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hr5"))
														+Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("miss5"))
														+Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("misswithglove5")))*100;
												if(cnt){total_as += cnt;}
												comp_bp += (Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hw1"))
													+Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hr1")));
												comp_ba += (Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hw2"))
													+Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hr2")));
												comp_af += (Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hw3"))
													+Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hr3")));
												comp_ap += (Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hw4"))
													+Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hr4")));
												comp_as += (Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hw5"))
													+Number(xml.deptComp.summ_total.(@totalhwhr!="").attribute("hr5")));
											}
										}
										else {
											var cnt:Number = 0;
											cnt = (Number(xml.deptComp.deptc.(@dept==depart).attribute("hw1"))
												+Number(xml.deptComp.deptc.(@dept==depart).attribute("hr1")))
												/(Number(xml.deptComp.deptc.(@dept==depart).attribute("hw1"))
													+Number(xml.deptComp.deptc.(@dept==depart).attribute("hr1"))
													+Number(xml.deptComp.deptc.(@dept==depart).attribute("miss1"))
													+Number(xml.deptComp.deptc.(@dept==depart).attribute("mglove1")))*100;
											if(cnt){total_bp+=cnt;}
											
											cnt = (Number(xml.deptComp.deptc.(@dept==depart).attribute("hw2"))
												+Number(xml.deptComp.deptc.(@dept==depart).attribute("hr2")))
												/(Number(xml.deptComp.deptc.(@dept==depart).attribute("hw2"))
													+Number(xml.deptComp.deptc.(@dept==depart).attribute("hr2"))
													+Number(xml.deptComp.deptc.(@dept==depart).attribute("miss2"))
													+Number(xml.deptComp.deptc.(@dept==depart).attribute("mglove2")))*100;
											if(cnt){total_ba+=cnt;}
											
											cnt = (Number(xml.deptComp.deptc.(@dept==depart).attribute("hw3"))
												+Number(xml.deptComp.deptc.(@dept==depart).attribute("hr3")))
												/(Number(xml.deptComp.deptc.(@dept==depart).attribute("hw3"))
													+Number(xml.deptComp.deptc.(@dept==depart).attribute("hr3"))
													+Number(xml.deptComp.deptc.(@dept==depart).attribute("miss3"))
													+Number(xml.deptComp.deptc.(@dept==depart).attribute("mglove3")))*100;
											if(cnt){total_af+=cnt;}
											
											cnt = (Number(xml.deptComp.deptc.(@dept==depart).attribute("hw4"))
												+Number(xml.deptComp.deptc.(@dept==depart).attribute("hr4")))
												/(Number(xml.deptComp.deptc.(@dept==depart).attribute("hw4"))
													+Number(xml.deptComp.deptc.(@dept==depart).attribute("hr4"))
													+Number(xml.deptComp.deptc.(@dept==depart).attribute("miss4"))
													+Number(xml.deptComp.deptc.(@dept==depart).attribute("mglove4")))*100;
											if(cnt){total_ap+=cnt;}
											
											cnt = (Number(xml.deptComp.deptc.(@dept==depart).attribute("hw5"))
												+Number(xml.deptComp.deptc.(@dept==depart).attribute("hr5")))
												/(Number(xml.deptComp.deptc.(@dept==depart).attribute("hw5"))
													+Number(xml.deptComp.deptc.(@dept==depart).attribute("hr5"))
													+Number(xml.deptComp.deptc.(@dept==depart).attribute("miss5"))
													+Number(xml.deptComp.deptc.(@dept==depart).attribute("mglove5")))*100;
											if(cnt){total_as+=cnt;}
											
											comp_bp += (Number(xml.deptComp.deptc.(@dept==depart).attribute("hw1"))
												+Number(xml.deptComp.deptc.(@dept==depart).attribute("hr1")));
											comp_ba += (Number(xml.deptComp.deptc.(@dept==depart).attribute("hw2"))
												+Number(xml.deptComp.deptc.(@dept==depart).attribute("hr2")));
											comp_af += (Number(xml.deptComp.deptc.(@dept==depart).attribute("hw3"))
												+Number(xml.deptComp.deptc.(@dept==depart).attribute("hr3")));
											comp_ap += (Number(xml.deptComp.deptc.(@dept==depart).attribute("hw4"))
												+Number(xml.deptComp.deptc.(@dept==depart).attribute("hr4")));
											comp_as += (Number(xml.deptComp.deptc.(@dept==depart).attribute("hw5"))
												+Number(xml.deptComp.deptc.(@dept==depart).attribute("hr5")));													
										}
										//Until here you can get the Compliance rate by 5 Moment.
									}
									catch(e:Error){
										//trace("e: " + e.toString());
									} 
								}
								
							}
							if(comp_bp>max){max=comp_bp;}
							if(comp_ba>max){max=comp_ba;}
							if(comp_af>max){max=comp_af;}
							if(comp_ap>max){max=comp_ap;}
							if(comp_as>max){max=comp_as;}
							if(i==0){
								bpQuarter1 = total_bp/3;
								baQuarter1 = total_ba/3;
								afQuarter1 = total_af/3;
								apQuarter1 = total_ap/3;
								asQuarter1 = total_as/3;
								bpQuarter11 = comp_bp;
								baQuarter11 = comp_ba;
								afQuarter11 = comp_af;
								apQuarter11 = comp_ap;
								asQuarter11 = comp_as;
							}
							else if(i==1){
								bpQuarter2 = total_bp/3;
								baQuarter2 = total_ba/3;
								afQuarter2 = total_af/3;
								apQuarter2 = total_ap/3;
								asQuarter2 = total_as/3;
								bpQuarter21 = comp_bp;
								baQuarter21 = comp_ba;
								afQuarter21 = comp_af;
								apQuarter21 = comp_ap;
								asQuarter21 = comp_as;
							}
							else if(i==2){
								bpQuarter3 = total_bp/3;
								baQuarter3 = total_ba/3;
								afQuarter3 = total_af/3;
								apQuarter3 = total_ap/3;
								asQuarter3 = total_as/3;
								bpQuarter31 = comp_bp;
								baQuarter31 = comp_ba;
								afQuarter31 = comp_af;
								apQuarter31 = comp_ap;
								asQuarter31 = comp_as;
							}
							else if(i==3){
								bpQuarter4 = total_bp/3;
								baQuarter4 = total_ba/3;
								afQuarter4 = total_af/3;
								apQuarter4 = total_ap/3;
								asQuarter4 = total_as/3;
								bpQuarter41 = comp_bp;
								baQuarter41 = comp_ba;
								afQuarter41 = comp_af;
								apQuarter41 = comp_ap;
								asQuarter41 = comp_as;
							}
							
						}
						columnData.push({cat:"Before Patient",doc1:bpQuarter1, doc2:bpQuarter2, doc3:bpQuarter3, doc4:bpQuarter4});
						columnData.push({cat:"Before Aseptic",doc1:baQuarter1, doc2:baQuarter2, doc3:baQuarter3, doc4:baQuarter4});
						columnData.push({cat:"After Body Fluid",doc1:afQuarter1, doc2:afQuarter2, doc3:afQuarter3, doc4:afQuarter4});
						columnData.push({cat:"After Patient",doc1:apQuarter1, doc2:apQuarter2, doc3:apQuarter3, doc4:apQuarter4});
						columnData.push({cat:"After Patient Surrounding",doc1:asQuarter1, doc2:asQuarter2, doc3:asQuarter3, doc4:asQuarter4});
						columnData1.push({cat:"Before Patient",doc1:bpQuarter11, doc2:bpQuarter21, doc3:bpQuarter31, doc4:bpQuarter41});
						columnData1.push({cat:"Before Aseptic",doc1:baQuarter11, doc2:baQuarter21, doc3:baQuarter31, doc4:baQuarter41});
						columnData1.push({cat:"After Body Fluid",doc1:afQuarter11, doc2:afQuarter21, doc3:afQuarter31, doc4:afQuarter41});
						columnData1.push({cat:"After Patient",doc1:apQuarter11, doc2:apQuarter21, doc3:apQuarter31, doc4:apQuarter41});
						columnData1.push({cat:"After Patient Surrounding",doc11:asQuarter1, doc2:asQuarter21, doc3:asQuarter31, doc4:asQuarter41});
						this.columnchart.dataProvider = columnData;
						this.columnchart1.dataProvider = columnData1;
						
						if(file.exists){
							try{
								var stream:FileStream = new FileStream()
								stream.open(file, FileMode.READ);
								raw = stream.readUTFBytes(stream.bytesAvailable).toString();
								stream.close();
								
								
								//start decrypt here
								//s = AESCrypto.decrypt(raw, Constants.getLicenseKey().substring(0,16));
								//AESCrypto.decrypt(raw, Constants.getLicenseKey().substring(0,16))
								//doDecrypt
								
								
								s = raw;//"<?xml version=\"1.0\" encoding=\"UTF-8\"?><report>" + AESCrypto.decrypt(raw, Constants.getLicenseKey().substring(0,16)) + "</report>";
								trace("dec: " + s);
								
							}catch(e:Error){
								trace("e: " + e.toString());
							}
						}
						
						//this.xmlColumnChart2 = new XML(s).day.dt;
					}catch(error:Error){
						trace("Err: " + error.toString());
					}
				}
				if(max/100>=1){paragraph = 20;}
				else if(max/10 >=1){paragraph = 27;}
				else if(max == 0) {paragraph = 20;}
				else if(max<4) {paragraph = 24;}
				else {paragraph = 30;}
				if(depart!=""){
					columnchart1.left = paragraph;
				}
			}
			
			protected function btnDepartment_changeHandler(event:IndexChangeEvent):void
			{
				// TODO Auto-generated method stub
				depart = btnDepartment.selectedItem.@label;
				columnData = [];
				columnData1 = [];
				fetchLocalXML();
				
			}
			
			protected function btnYear_changeHandler(event:IndexChangeEvent):void
			{
				// TODO Auto-generated method stub
				year = btnYear.selectedItem.year;
				columnData = [];
				columnData1 = [];
				fetchLocalXML();
				
			}
				
			private function pieSeries_fillFunc(item:ChartItem, index:Number):IFill {
				//var curItem:ColumnSeries = ColumnSeries(item);
				/* Convert to a number between 0 and 1. */
				//var pct:Number = curItem.percentValue / 100;
				iColorNumber += 20;
				return new SolidColor(0xFF00FF * iColorNumber, 1.0);
			}
			
			private function setCustomLabel(element:ChartItem, series:Series):String {
				// Get a refereence to the current data element.
				var data:ColumnSeriesItem = ColumnSeriesItem(element);        
				
				// Get a reference to the current series.        
				var currentSeries:ColumnSeries = ColumnSeries(series);
				
				// Create a return String and format the number.
				//return currentSeries.yField + ":" + " $" + nf1.format(data.yNumber);
				return Number(data.yNumber).toFixed(1).toString();
			}
			
			
			private function linearAxis_labelFunc(item:Object, prevValue:Object, axis:IAxis):String {
				return item + "%"
			}
			
			/*private function columnSeries2_labelFunc(element:ChartItem, series:Series):String {
			var csi:ColumnSeriesItem = ColumnSeriesItem(element);
			var ser:ColumnSeries = ColumnSeries(series);
			return Number(csi.item.@hw).toFixed(1).toString() + "%";
			}
			private function columnSeries3_labelFunc(element:ChartItem, series:Series):String {
			var csi:ColumnSeriesItem = ColumnSeriesItem(element);
			var ser:ColumnSeries = ColumnSeries(series);
			return Number(csi.item.@miss).toFixed(1).toString() + "%";
			}
			private function columnSeries4_labelFunc(element:ChartItem, series:Series):String {
			var csi:ColumnSeriesItem = ColumnSeriesItem(element);
			var ser:ColumnSeries = ColumnSeries(series);
			return Number(csi.item.@glove).toFixed(1).toString() + "%";
			}*/
			
			
			
			
			[Bindable]
			private var warmColorsArray:Array = new Array(
				//new SolidColor(0xfd135a, 1) 
				new SolidColor(0x13a8f6, 1)
			);
			[Bindable]
			private var warmColorsArray2:Array = new Array(
				//new SolidColor(0x25857d, 1)
				new SolidColor(0xcbde2a, 1)
			);
			[Bindable]
			private var warmColorsArray3:Array = new Array(
				//new SolidColor(0x350d25, 1)
				new SolidColor(0xffcf0d, 1)
			);
			[Bindable]
			private var warmColorsArray4:Array = new Array(
				//new SolidColor(0x00c088, 1)
				new SolidColor(0xff69b0, 1)
			);
			
			private function initTabs():void
			{
				nav.setClosePolicyForTab(0, SuperTab.CLOSE_NEVER);
			}
						
			public function myListener(e:ChartItemEvent):void {
				//ti1.text = e.hitData.item.expenses;
				//ti2.text = String(e.hitData.x) + ", " + String(e.hitData.y);
				trace("hitData: " + e.hitData.item.cat); //for the 5 moments...
				trace("hitData: " + e.hitData.item.cnt); //for its 5 moments count!
				
				doPopDataPoint(e);
				
			}
			
			private var popUpMenu = new NativeMenu();
			private var popUpMenuItemByProf = new NativeMenuItem("By Professional");
			private var popUpMenuItemByDept = new NativeMenuItem("By Ward/Facility");
			private var popUpMenuItemByMoment = new NativeMenuItem("By Moment");
			private var popUpMenuItemByAction = new NativeMenuItem("By Action");
			private var hitItem:String = "";
			
			private function initMenu():void{
				popUpMenuItemByProf.addEventListener(Event.SELECT, function(e:Event):void{
					doAnalysisByDataPoint(e, hitItem);
				});
				popUpMenuItemByDept.addEventListener(Event.SELECT, function(e:Event):void{
					doAnalysisByDataPoint(e, hitItem);
				});
				popUpMenuItemByMoment.addEventListener(Event.SELECT, function(e:Event):void{
					doAnalysisByDataPoint(e, hitItem);
				});
				popUpMenuItemByAction.addEventListener(Event.SELECT, function(e:Event):void{ 
					doAnalysisByDataPoint(e, hitItem);
				});
				
				//for add to new report
				popReport_NewReport.addEventListener(Event.SELECT, function(e:Event):void{ 
					showNewReportDialog();
				});
				//end for add to new report
				
			}
			
			var isSelected:Boolean = false;
			
			private function doAnalysisByDataPoint(event:Event, hitItem:String):void{
				if(isSelected==false){
					trace("Selected command: " + hitItem + " " + event.target.label);
					isSelected = true;
					
					addTab(hitItem + " " + event.target.label, hitItem, event.target.label, nav);
					nav.selectedIndex = nav.getChildren().length-1;
					
				}
				//mx.controls.Alert.show("i");
			}
			
			private function doDynamicMenu(obj:Object):void{
				//trace("obj.id " + obj.id);
				
				//if(obj id)
				popUpMenu.removeAllItems();
				popUpMenu.addItem(popUpMenuItemByDept);
				popUpMenu.addItem(popUpMenuItemByProf);
				popUpMenu.addItem(popUpMenuItemByAction);
				isSelected = false;
				
			}
			
			private function doPopDataPoint(e:ChartItemEvent):void {
				
				hitItem = e.hitData.item.cat;
				doDynamicMenu(null);
				popUpMenu.display(this.stage, e.stageX, e.stageY);
				
				//trace("hit1");
				//popMenu.display(this.stage, e.stageX, e.stageY);
				//trace("hit2");
				/*trace("hit: " + e.hitData.item.cat);
				myMenu = new FlexNativeMenu(); 
				myMenu.dataProvider = menuData; 
				myMenu.labelField = "@label"; 
				myMenu.showRoot = false; 
				myMenu.setContextMenu(columnchart2);
				
				myMenu.display(this.stage, e.localX, e.localY);*/
				
			}
			
			private function addTab(lbl:String, item:String, groupBy:String, navigator:SuperTabNavigator, 
																			 contentString:String=null, icon:Class=null):void
			{
				if (lbl == "")
					lbl = "Graph";
				
				var curNum:Number = nav.numChildren + 1;
				
				var child:VBox = new VBox();
				
				child.setStyle("closable", true);
				
				child.label = lbl;
				
				if (icon)
				{
					child.icon = icon;
				}
				else
				{
					child.icon = document_icon;
				}
				var label:Label = new Label();
				label.text = contentString == null ? "Content for: " + lbl : contentString;
				
				child.addChild(label);
				
				var bc:BorderContainer = new BorderContainer();
				bc.percentHeight=100;
				bc.percentWidth=100;
				var ca:ColumnChart = new ColumnChart();
				var cAxis:CategoryAxis = new CategoryAxis();
				cAxis.categoryField="cat";
				ca.horizontalAxis = cAxis;
				var cs:ColumnSeries = new ColumnSeries();
				cs.setStyle("fontSize", 20);
				cs.setStyle("labelAlign", "top");
				cs.setStyle("labelPosition", "outside");
				//cs.fillFunction = fillFunction;
				cs.displayName = "cat";
				cs.yField = "cnt";
				var seriesArray:Array = new Array();
				seriesArray.push(cs);
				ca.series = seriesArray;
				
				//if(groupBy!="By Action"){
				ca.y=10;
				ca.left=10;
				ca.right=10;
				ca.height=260
				/*} else {
				ca.percentWidth=100;
				ca.percentHeight=100;
				}*/
				
				var caComp:ColumnChart = new ColumnChart();
				var cAxisComp:CategoryAxis = new CategoryAxis();
				cAxisComp.categoryField = "cat";
				caComp.horizontalAxis = cAxisComp;
				
				//<mx:verticalAxis>
				//<mx:LinearAxis id="vAxis2"
				//   minimum="0"
				//   maximum="100"
				//  labelFunction="linearAxis_labelFunc" />
				//</mx:verticalAxis>		
				var lAxisComp:LinearAxis = new LinearAxis();
				lAxisComp.minimum=0;
				lAxisComp.maximum=100;
				lAxisComp.labelFunction=linearAxis_labelFunc;
				
				caComp.verticalAxis=lAxisComp;
				
				var csComp:ColumnSeries = new ColumnSeries();
				csComp.setStyle("fontSize", 20);
				csComp.setStyle("labelAlign", "top");
				csComp.setStyle("labelPosition", "outside");
				//csComp.fillFunction = fillFunction;
				csComp.displayName = "cat";
				csComp.yField = "pect";
				var seriesArrayComp:Array = new Array();
				seriesArrayComp.push(csComp);
				caComp.series = seriesArrayComp;
				//caComp.percentWidth=100;
				//caComp.y = systemManager.screen.height/2;
				//trace("Y NEW caComp Chart " + String(systemManager.screen.height/2));
				
				caComp.y=270;
				caComp.left=10;
				caComp.right=10;
				caComp.height=260;
				
				/*<mx:ColumnChart id="chartAnalytic" x="89" y="20" width="456" height="241" dataProvider="{jsonAnalytic}">
				
				<mx:horizontalAxis>
				<mx:CategoryAxis categoryField="cat"/>
				</mx:horizontalAxis>		
				<mx:series>
				<mx:ColumnSeries fontSize="16" 
				fillFunction="{fillFunction}"
				fills="{this.parentApplication.themeColor}" displayName="cat" yField="cnt" labelAlign="top" labelPosition="outside" showDataEffect="slideUp" />
				</mx:series>
				
				</mx:ColumnChart>*/
				
				
				if(groupBy=="By Action"){
					
					if(item=="Before patient"){
						ca.dataProvider =  this.parentApplication.doAnalyticByAction("1", "2015-03");
					} else if(item=="Before aseptic"){
						ca.dataProvider =  this.parentApplication.doAnalyticByAction("2", "2015-03");
					} else if(item=="After body fluid"){
						ca.dataProvider =  this.parentApplication.doAnalyticByAction("3", "2015-03");
					} else if(item=="After patient"){
						ca.dataProvider =  this.parentApplication.doAnalyticByAction("4", "2015-03");
					} else if(item=="After patient surrounding"){
						ca.dataProvider =  this.parentApplication.doAnalyticByAction("5", "2015-03");
					}
					
				} else if(groupBy=="By Professional"){
					if(item=="Before patient"){
						ca.dataProvider = this.parentApplication.doAnalyticByProfessional("1", "2015-03");
					} else if(item=="Before aseptic"){
						ca.dataProvider = this.parentApplication.doAnalyticByProfessional("2", "2015-03");
					} else if(item=="After body fluid"){
						ca.dataProvider = this.parentApplication.doAnalyticByProfessional("3", "2015-03");
					} else if(item=="After patient"){
						ca.dataProvider = this.parentApplication.doAnalyticByProfessional("4", "2015-03");
					}  else if(item=="After patient surrounding"){
						ca.dataProvider = this.parentApplication.doAnalyticByProfessional("5", "2015-03");
					}
				} else if(groupBy=="By Ward/Facility"){
					if(item=="Before patient"){
						ca.dataProvider = this.parentApplication.doAnalyticByDepartment("1", "2015-03");
					} else if(item=="Before aseptic"){
						ca.dataProvider = this.parentApplication.doAnalyticByDepartment("2", "2015-03");
					} else if(item=="After body fluid"){
						ca.dataProvider = this.parentApplication.doAnalyticByDepartment("3", "2015-03");
					} else if(item=="After patient"){
						ca.dataProvider = this.parentApplication.doAnalyticByDepartment("4", "2015-03");
					}  else if(item=="After patient surrounding"){
						ca.dataProvider = this.parentApplication.doAnalyticByDepartment("5", "2015-03");
					}
				}
				
				bc.addElement(ca);
				//if(groupBy!="By Action"){				
				caComp.dataProvider = ca.dataProvider;
				bc.addElement(caComp);
				//}
				child.addChild(bc);
				
				navigator.addChild(child);
			}
			
			//end new function for open tabs
			
			
			//2015-06-25 by Alfred - add to report menu function
			private var isPopReport:Boolean = false;
			private var popReportMenu = new NativeMenu();
			private var popReport_NewReport = new NativeMenuItem("New Report...");
			
			private var strSelectedReport:String = "";
			
			private var rptDomain:String="";
			private var rptGroupBy:String="";
			private var rptParam:String="";
			
			//add on json report field
			private var rptStart:String = "";
			private var rptEnd:String = "";
			private var rptWards:String = "";
			private var rptProfs:String = ""; 
			private var rptWard:String = "";
			
			
			//for report function 
			protected function doAddToReportMenu(event:MouseEvent, report:String, domain:String="", groupBy:String="", param:String=""):void{
				// TODO Auto-generated method stub
				//dynamic adding...
				//default got new report...
				
				this.strSelectedReport = report;
				
				this.rptDomain = domain;
				this.rptGroupBy = groupBy;
				this.rptParam = param;
				
				trace("domain: " + domain + " groupby: " + groupBy + " param: " + param);
				
				isPopReport = false;
				
				trace("remove all item");
				trace("add report '" + report + "'");
				popReportMenu.removeAllItems();
				
				
				popReportMenu.addItem(popReport_NewReport);
				trace("create new report");
				//TODO: if got report created list down here...
				
				//load available reports....
				
				try{
					SemmelReport.loadReportListing();
					var mList:ArrayCollection = SemmelReport.acReportsListing; 
					if(mList.length>0){
						for(var i:Number=0;i<mList.length;i++){
							var itm:Object = mList.getItemAt(i); 
							trace(itm.reportTitle);
							
							trace("dynamic menu label...");
							var mnuReport:NativeMenuItem = new NativeMenuItem(itm.reportTitle);
							
							//mnuReport.addEventListener(Event.SELECT, function(e:Event):void{
							//showNewReportDialog();
							//trace("dynamic add menu: " + itm.id);
							//showReportsWindow(itm.id);	
							//showReportsWindow(e);
							//});
							//for add to new report
							
							mnuReport.addEventListener(Event.SELECT, function(e:Event):void{ 
								showReportsWindow(e);
							});
							
							popReportMenu.addItem(mnuReport);
						}
						//for(var obj:Object in mList){
						//	trace("report menu list: " + obj.reportTitle);
						//}	
					}	
					
				}catch(error:Error){
					trace("Error list report: " + error.toString());
				}
				
				
				
				popReportMenu.display(this.stage, event.stageX, event.stageY);
				trace("display menu...");
				
			}
			
			private function showReportsWindow(event:Event):void {
				//trace("pop report window id: " + reportTitle);
				
				//trace("event: " + e.contextMenuOwner.label);
				//trace("event: " + e.contextMenuOwner.text);
				
				var menuItem:NativeMenuItem = event.target as NativeMenuItem; 
				trace(menuItem.label + " has been selected"); 
				
				if(!isPopReport){
					isPopReport = true;
					var winReports:ReportsWindow = new ReportsWindow();
					winReports.open(this, true);
					var obj:Object = new Object();
					
					trace("domain: " + rptDomain + " groupby: " + rptGroupBy + " param: " + rptParam);
					trace("s report: " + this.strSelectedReport);
					
					obj.reportTitle = menuItem.label;
					
					obj.rptDomain = rptDomain;
					obj.rptGroupBy = rptGroupBy;
					obj.rptParam = rptParam;
					
					//add on for start/end, wards
					if(this.rptWards!=""){
						obj.rptWards = rptWards;
						obj.rptStart = rptStart;
						obj.rptEnd = rptEnd;
					}
					//add on for start/end, ward, profs
					if(this.rptProfs!=""){
						obj.rptWard = rptWard;
						obj.rptProfs = rptProfs;
						obj.rptStart = rptStart;
						obj.rptEnd = rptEnd;
					}
					
					obj.cid = SemmelReport.getCID(this.strSelectedReport, rptDomain, rptGroupBy);
					
					trace("return CID: " + obj.cid);
					
					obj.addReport = this.strSelectedReport;
					obj.isExist = "1";
					obj.selectYM = this.parentApplication.selectedYMLabel;
					winReports.data = obj;
					PopUpManager.centerPopUp(winReports);
				}
			}
			
			
			private function showNewReportDialog():void {
				if(!isPopReport){
					isPopReport = true;
					var winNewReport:NewReportWindow = new NewReportWindow();
					winNewReport.open(this, true);
					winNewReport.addEventListener('close', newReport_closeHandler);
					PopUpManager.centerPopUp(winNewReport);
				}
			}
			// Handle the close event from the SkinnablePopUpContainer.
			protected function newReport_closeHandler(event:PopUpEvent):void {
				// If commit is false, do data is returned.
				if (!event.commit)
					return;
				
				// Write the returned String to the TextArea control.
				//myTA.text = event.data as String;
				//trace(event.data as String);
				trace(event.data.reportTitle as String);
				trace(this.strSelectedReport);
				
				var winReports:ReportsWindow = new ReportsWindow();
				winReports.open(this, true);
				//winReports.addEventListener('close', newReport_closeHandler);
				var obj:Object = new Object();
				obj.reportTitle = event.data.reportTitle as String;
				
				obj.rptDomain = rptDomain;
				obj.rptGroupBy = rptGroupBy;
				obj.rptParam = rptParam;
				
				//add on for start/end, wards
				if(this.rptWards!=""){
					obj.rptWards = rptWards;
					obj.rptStart = rptStart;
					obj.rptEnd = rptEnd;
				}
				
				obj.cid = SemmelReport.getCID(this.strSelectedReport, rptDomain, rptGroupBy);
				obj.addReport = this.strSelectedReport;
				obj.selectYM = this.parentApplication.selectedYMLabel;
				winReports.data = obj;
				
				PopUpManager.centerPopUp(winReports);
				
				//pop.addReport = this.strSelectedReport;
			} 
			//end for report funciton
			
		]]>
	</fx:Script>
	
	<flexlib:SuperTabNavigator id="nav" x="0" y="0" width="100%" height="100%" cornerRadius="4"
							   closePolicy="{SuperTab.CLOSE_ROLLOVER}" horizontalGap="0"
							   scrollSpeed="25" startScrollingEvent="{MouseEvent.MOUSE_DOWN}"
							   stopScrollingEvent="{MouseEvent.MOUSE_UP}">
		
		<s:NavigatorContent width="100%" height="100%" label=" " icon="{home_icon}" creationComplete="initTabs()">
			
			<s:BorderContainer id="pnl" x="0" y="0" width="100%" height="100%" borderColor="#FFFFFF">
				
				<mx:Legend y="32" right="10" width="513" height="30" fontSize="12">
					<mx:LegendItem label="Jan - Mar" fontWeight="bold">
						<mx:fill>
							<mx:SolidColor color="0x13a8f6"/>
						</mx:fill>
					</mx:LegendItem>
					<mx:LegendItem label="Apr - Jun" fontWeight="bold">
						<mx:fill>
							<mx:SolidColor color="0xcbde2a"/>
						</mx:fill>
					</mx:LegendItem>
					<mx:LegendItem label="Jul - Sep" fontWeight="bold">
						<mx:fill>
							<mx:SolidColor color="0xffcf0d"/>
						</mx:fill>
					</mx:LegendItem>	
					<mx:LegendItem label="Oct - Dec" fontWeight="bold">
						<mx:fill>
							<mx:SolidColor color="0xff69b0"/>
						</mx:fill>
					</mx:LegendItem>		
				</mx:Legend>
				<mx:ColumnChart id="columnchart1" y="60" left="{paragraph}" right="10" height="273"
								dataProvider="{columnData1}" fontSize="12" seriesFilters="[]"
								showDataTips="false">
					<mx:verticalAxis>
						<mx:LinearAxis id="vAxis0"
									   minimum="0" 
									   />
					</mx:verticalAxis>	
					<mx:horizontalAxis>
						<mx:CategoryAxis categoryField="cat"/>
					</mx:horizontalAxis>		
					<mx:series>
						
						<!--THIS IS NOT REQUIRED cant be benchmark also for benchmark line-->
						<!--<mx:LineSeries yField="Y" xField="X"
						lineStroke="{this.parentApplication.lineStroke}"
						dataProvider="{this.parentApplication.lineDataProvider}">
						<mx:horizontalAxis>
						<mx:LinearAxis maximum="1"/>
						</mx:horizontalAxis>
						</mx:LineSeries>-->
						<!--end for benchmark line-->
						
						<mx:ColumnSeries 
							fills="{warmColorsArray}" displayName="Quarter1" yField="doc1" labelSizeLimit="9" labelAlign="top" labelPosition="outside" showDataEffect="slideUp" />
						<mx:ColumnSeries 
							fills="{warmColorsArray2}" displayName="Quarter2" yField="doc2" labelAlign="top" labelPosition="outside" showDataEffect="slideUp" />
						<mx:ColumnSeries 
							fills="{warmColorsArray3}" displayName="Quarter3" yField="doc3" labelAlign="top" labelPosition="outside" showDataEffect="slideUp"/>
						<mx:ColumnSeries 
							fills="{warmColorsArray4}" displayName="Quarter4" yField="doc4" labelAlign="top" labelPosition="outside" showDataEffect="slideUp" />
					</mx:series>
				</mx:ColumnChart>
				<mx:ColumnChart id="columnchart" y="363" left="10" right="10" height="240"
								dataProvider="{columnData}" fontSize="12" seriesFilters="[]"
								showDataTips="false">
					<mx:verticalAxis>
						<mx:LinearAxis id="vAxis1"
									   minimum="0" 
									   maximum="100" labelFunction="linearAxis_labelFunc" />
					</mx:verticalAxis>	
					<mx:horizontalAxis>
						<mx:CategoryAxis categoryField="cat"/>
					</mx:horizontalAxis>		
					<mx:series>
						
						<!--THIS IS NOT REQUIRED cant be benchmark also for benchmark line-->
						<!--<mx:LineSeries yField="Y" xField="X"
						lineStroke="{this.parentApplication.lineStroke}"
						dataProvider="{this.parentApplication.lineDataProvider}">
						<mx:horizontalAxis>
						<mx:LinearAxis maximum="1"/>
						</mx:horizontalAxis>
						</mx:LineSeries>-->
						<!--end for benchmark line-->
						
						<mx:ColumnSeries 
							fills="{warmColorsArray}" labelFunction="setCustomLabel" displayName="Quarter1" yField="doc1" labelSizeLimit="9" labelAlign="top" labelPosition="outside" showDataEffect="slideUp" />
						<mx:ColumnSeries 
							fills="{warmColorsArray2}" labelFunction="setCustomLabel" displayName="Quarter2" yField="doc2" labelAlign="top" labelPosition="outside" showDataEffect="slideUp" />
						<mx:ColumnSeries 
							fills="{warmColorsArray3}" labelFunction="setCustomLabel" displayName="Quarter3" yField="doc3" labelAlign="top" labelPosition="outside" showDataEffect="slideUp"/>
						<mx:ColumnSeries 
							fills="{warmColorsArray4}" labelFunction="setCustomLabel" displayName="Quarter4" yField="doc4" labelAlign="top" labelPosition="outside" showDataEffect="slideUp" />
					</mx:series>
				</mx:ColumnChart>
				<s:Label y="20" x="100" fontWeight="bold"  fontSize="15" text="Hand Hygiene Opportunity By Moment"/>
				<s:Label y="340" x="100" fontWeight="bold"  fontSize="15" text="Hand Hygiene Compliance By Moment"/>
				<s:Label y="10" right="270" text="Departments :"/>
				<s:Label y="10" right="475" text="Year :"/>
				<s:DropDownList id="btnDepartment" visible="true" y="0" right="35" width="224" height="32"
								blendMode="darken" change="btnDepartment_changeHandler(event)"
								dataProvider="{xmlDatagrid}" labelField="@label" prompt="All"></s:DropDownList>
				
				<s:DropDownList id="btnYear" visible="true" y="0" right="365" width="100" height="32"
								blendMode="darken" change="btnYear_changeHandler(event)"
								dataProvider="{yearDatagrid}" labelField="year" prompt="{year}"></s:DropDownList>
				
				<s:Image id="btnAddReport_AvgActions" y="7" right="7"
						 click="doAddToReportMenu(event, SemmelReport.AvgActions)" smooth="true"
						 smoothingQuality="high" source="@Embed('asset/images/report_up.png')"/>
				
			</s:BorderContainer>
		</s:NavigatorContent>
		
	</flexlib:SuperTabNavigator>
	
</s:NavigatorContent>
