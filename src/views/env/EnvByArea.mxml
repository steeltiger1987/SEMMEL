<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:flexlib="flexlib.containers.*"
					xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:controls="flexlib.controls.*"
					xmlns:comp="com.connectedpixel.charts.*"
					width="100%" height="660" creationComplete="fetchLocalXML()">
	<fx:Style>
		@namespace tab "flexlib.controls.tabBarClasses.*";
		tab|SuperTab{ 
			tabCloseButtonStyleName:"SuperTabButtonStyle"; 
		} 
		.SuperTabButtonStyle{
			icon: Embed(source="../../close.png");
			/*upSkin:   Embed("close.png"); 
			downSkin: Embed("close.png");
			overSkin: Embed("close.png");*/ 
		}
	</fx:Style>
	<fx:Declarations>
		
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:SeriesSlide 
			id="slideUp" 
			duration="1000" 
			direction="up"/>
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			
			import com.report.bi.*;
			import com.report.env.EnvReportController;
			import com.semmel.*;
			
			import spark.components.DropDownList;
			import spark.components.Image;
			
			import core.hash.crc32;
			
			import de.polygonal.ds.HashMap;
			
			import flash.display.NativeMenu;
			import flash.display.NativeMenuItem;
			
			import flexlib.containers.SuperTabNavigator;
			import flexlib.controls.SuperTabBar;
			import flexlib.controls.tabBarClasses.SuperTab;
			import flexlib.events.TabReorderEvent;
			
			import mx.charts.ChartItem;
			import mx.charts.chartClasses.IAxis;
			import mx.charts.chartClasses.NumericAxis;
			import mx.charts.chartClasses.Series;
			import mx.charts.events.ChartEvent;
			import mx.charts.events.ChartItemEvent;
			import mx.charts.series.ColumnSeries;
			import mx.charts.series.items.ColumnSeriesItem;
			import mx.collections.*;
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.containers.Canvas;
			import mx.containers.VBox;
			import mx.controls.FlexNativeMenu;
			import mx.events.MenuEvent;
			import mx.graphics.IFill;
			import mx.graphics.SolidColor;
			import mx.graphics.Stroke;
			import mx.managers.PopUpManager;
			import mx.printing.*;
			import mx.utils.ObjectUtil;
			
			import spark.components.Group;
			import spark.components.TitleWindow;
			import spark.events.IndexChangeEvent;
			import spark.events.PopUpEvent;
			
			import views.NewReportWindow;
			import views.ReportsWindow;
			
			private var myMenu:FlexNativeMenu;
			
			private var popMenu:NativeMenu;
			private var popMenuItem:NativeMenuItem;

			[Embed(source="../../../assets/document.png")]
			private var document_icon:Class;       
			
			[Embed(source="../../../assets/home.png")]
			private var home_icon:Class;
			
			private var seriesBenchMark:Array=null;
			
			private var acSelectedDept:ArrayCollection = new ArrayCollection();
			
			//2015-06-25 by Alfred - add to report menu function
			private var popReportMenu = new NativeMenu();
			private var popReport_NewReport = new NativeMenuItem("New Report...");
			
			private var strSelectedReport:String = "";
			
			private var rptDomain:String="";
			private var rptGroupBy:String="";
			private var rptParam:String="";
			
			//add on json report field
			private var rptStart:String = "";
			private var rptEnd:String = "";
			private var rptWards:String = "";
			private var rptProfs:String = ""; 
			private var rptWard:String = "";
			
			
			protected function doAddToReportMenu(event:MouseEvent, report:String, domain:String="", groupBy:String="", param:String=""):void{
				// TODO Auto-generated method stub
				//dynamic adding...
				//default got new report...
				
				rptStart = "";
				rptEnd = "";
				rptWards = "";
				rptProfs = ""; 
				rptWard = "";
				
				if(report==SemmelReport.WardFacilityTrend){
					this.rptWards = "";
					for (var k:int = 0; k < this.parentApplication.acDepartment.length; k++)
					{
						if(this.parentApplication.acDepartment[k].selected){
							////lbSelections.text += " " + acList[i].label;
							trace("selected: " + this.parentApplication.acDepartment[k].label);
							
							this.rptWards += "'" + this.parentApplication.acDepartment[k].label + "',";
							
							//acSelectedDept.addItem(this.parentApplication.acDepartment[i]);
						}
					}
					
				
					
					if(this.rptWards.length!=0){
						this.rptWards = this.rptWards.substring(0, this.rptWards.length-1);
					}
					
					
				}
				
				if(report==SemmelReport.ProfTrend){
					this.rptProfs = "";
					
					for(var p:Number=0;p<this.parentApplication.acDynamicProfession.length;p++){
						if(this.parentApplication.acDynamicProfession[p].selected){
							trace("selected: " + this.parentApplication.acDynamicProfession[p].label);
							this.rptProfs += "'" + this.parentApplication.acDynamicProfession[p].label + "',";
						}
					}
					
					
					
					
				}
				
				this.strSelectedReport = report;
				
				this.rptDomain = domain;
				this.rptGroupBy = groupBy;
				this.rptParam = param;
				
				trace("domain: " + domain + " groupby: " + groupBy + " param: " + param);
				
				isPopReport = false;
				
				trace("remove all item");
				trace("add report '" + report + "'");
				popReportMenu.removeAllItems();
				
				
				popReportMenu.addItem(popReport_NewReport);
				trace("create new report");
				//TODO: if got report created list down here...
				
				//load available reports....
				
				try{
					SemmelReport.loadReportListing();
					var mList:ArrayCollection = SemmelReport.acReportsListing; 
					if(mList.length>0){
						for(var i:Number=0;i<mList.length;i++){
							var itm:Object = mList.getItemAt(i); 
							trace(itm.reportTitle);
							
							trace("dynamic menu label...");
							var mnuReport:NativeMenuItem = new NativeMenuItem(itm.reportTitle);
							
							//mnuReport.addEventListener(Event.SELECT, function(e:Event):void{
							//showNewReportDialog();
							//trace("dynamic add menu: " + itm.id);
							//showReportsWindow(itm.id);	
							//showReportsWindow(e);
							//});
							//for add to new report
							
							mnuReport.addEventListener(Event.SELECT, function(e:Event):void{ 
								showReportsWindow(e);
							});
							
							popReportMenu.addItem(mnuReport);
						}
						//for(var obj:Object in mList){
						//	trace("report menu list: " + obj.reportTitle);
						//}	
					}	
					
				}catch(error:Error){
					trace("Error list report: " + error.toString());
				}
				
				
				
				
				popReportMenu.display(this.stage, event.stageX, event.stageY);
				trace("display menu...");
			}
			
			
			private function showReportsWindow(event:Event):void {
				//trace("pop report window id: " + reportTitle);
				
				//trace("event: " + e.contextMenuOwner.label);
				//trace("event: " + e.contextMenuOwner.text);
				
				var menuItem:NativeMenuItem = event.target as NativeMenuItem; 
				trace(menuItem.label + " has been selected"); 
				
				if(!isPopReport){
					isPopReport = true;
					var winReports:ReportsWindow = new ReportsWindow();
					winReports.open(this, true);
					var obj:Object = new Object();
					
					trace("domain: " + rptDomain + " groupby: " + rptGroupBy + " param: " + rptParam);
					trace("s report: " + this.strSelectedReport);
					
					obj.reportTitle = menuItem.label;
					
					obj.rptDomain = rptDomain;
					obj.rptGroupBy = rptGroupBy;
					obj.rptParam = rptParam;
					
					//add on for start/end, wards
					if(this.rptWards!=""){
						obj.rptWards = rptWards;
						obj.rptStart = rptStart;
						obj.rptEnd = rptEnd;
					}
					//add on for start/end, ward, profs
					if(this.rptProfs!=""){
						obj.rptWard = rptWard;
						obj.rptProfs = rptProfs;
						obj.rptStart = rptStart;
						obj.rptEnd = rptEnd;
					}
					
					obj.cid = SemmelReport.getCID(this.strSelectedReport, rptDomain, rptGroupBy);
					
					trace("return CID: " + obj.cid);
					
					obj.addReport = this.strSelectedReport;
					obj.isExist = "1";
					obj.selectYM = this.parentApplication.selectedYMLabel;
					winReports.data = obj;
					PopUpManager.centerPopUp(winReports);
				}
			}
			
			
			private function showNewReportDialog():void {
				if(!isPopReport){
					isPopReport = true;
					var winNewReport:NewReportWindow = new NewReportWindow();
					winNewReport.open(this, true);
					winNewReport.addEventListener('close', newReport_closeHandler);
					PopUpManager.centerPopUp(winNewReport);
				}
			}
			// Handle the close event from the SkinnablePopUpContainer.
			protected function newReport_closeHandler(event:PopUpEvent):void {
				// If commit is false, do data is returned.
				if (!event.commit)
					return;
				
				// Write the returned String to the TextArea control.
				//myTA.text = event.data as String;
				//trace(event.data as String);
				trace(event.data.reportTitle as String);
				trace(this.strSelectedReport);
				
				var winReports:ReportsWindow = new ReportsWindow();
				winReports.open(this, true);
				//winReports.addEventListener('close', newReport_closeHandler);
				var obj:Object = new Object();
				obj.reportTitle = event.data.reportTitle as String;
				
				obj.rptDomain = rptDomain;
				obj.rptGroupBy = rptGroupBy;
				obj.rptParam = rptParam;
				
				//add on for start/end, wards
				if(this.rptWards!=""){
					obj.rptWards = rptWards;
					obj.rptStart = rptStart;
					obj.rptEnd = rptEnd;
				}
				
				obj.cid = SemmelReport.getCID(this.strSelectedReport, rptDomain, rptGroupBy);
				obj.addReport = this.strSelectedReport;
				obj.selectYM = this.parentApplication.selectedYMLabel;
				winReports.data = obj;
				
				PopUpManager.centerPopUp(winReports);
				
				//pop.addReport = this.strSelectedReport;
			} 
			
			private var isPopReport:Boolean = false;
		
			private var popUpMenu = new NativeMenu();
			private var popUpMenuItemByArea = new NativeMenuItem(Constants.FILTER_MENU_ENV_AREA);
			private var popUpMenuItemByWardFacility = new NativeMenuItem(Constants.FILTER_MENU_ENV_WARDFACILITY);
			private var popUpMenuItemByMethod = new NativeMenuItem(Constants.FILTER_MENU_ENV_METHOD);
			private var popUpMenuItemByCategory = new NativeMenuItem(Constants.FILTER_MENU_ENV_CATEGORY);
			private var popUpMenuItemByItem = new NativeMenuItem(Constants.FILTER_MENU_ENV_ITEM);
			private var popUpMenuItemByNote = new NativeMenuItem(Constants.FILTER_MENU_ENV_NOTE);
			
			private var hitItem:Object = null; //hit of column chart item (eg: cat, @name)
			private var domain:String = ""; //object domain of profession, department, moment
			
			private function initMenu():void{
				popUpMenuItemByArea.addEventListener(Event.SELECT, function(e:Event):void{
					doAnalysisByDataPoint(e, hitItem, domain);
				});
				popUpMenuItemByWardFacility.addEventListener(Event.SELECT, function(e:Event):void{
					doAnalysisByDataPoint(e, hitItem, domain);
				});
				popUpMenuItemByMethod.addEventListener(Event.SELECT, function(e:Event):void{
					doAnalysisByDataPoint(e, hitItem, domain);
				});
				popUpMenuItemByCategory.addEventListener(Event.SELECT, function(e:Event):void{
					doAnalysisByDataPoint(e, hitItem, domain);
				});
				popUpMenuItemByItem.addEventListener(Event.SELECT, function(e:Event):void{
					doAnalysisByDataPoint(e, hitItem, domain);
				});
				popUpMenuItemByNote.addEventListener(Event.SELECT, function(e:Event):void{ 
					doAnalysisByDataPoint(e, hitItem, domain);
				});
				
				//for add to new report
				popReport_NewReport.addEventListener(Event.SELECT, function(e:Event):void{ 
					showNewReportDialog();
				});
				//end for add to new report
				
				
			}
			
			var isSelected:Boolean = false;
			
			
			private function doAnalysisByDataPoint(event:Event, hitItem:Object, domain:String):void{
				if(isSelected==false){
					//trace("Selected command: " + hitItem.area + " / domain " + domain + " / " + event.target.label);
					isSelected = true;
					
					if(domain==Constants.DOMAIN_ENV_AREA){
						addTab(hitItem.area + " " + event.target.label, hitItem, event.target.label, nav);
					}
					
					nav.selectedIndex = nav.getChildren().length-1;
					
				}
				//mx.controls.Alert.show("i");
			}
			
			private function doDynamicMenu(obj:Object):void{
				
				popUpMenu.removeAllItems();
				if(this.domain==Constants.DOMAIN_ENV_AREA){
					popUpMenu.addItem(popUpMenuItemByWardFacility);
					popUpMenu.addItem(popUpMenuItemByMethod);
					popUpMenu.addItem(popUpMenuItemByCategory);
					popUpMenu.addItem(popUpMenuItemByItem);
					popUpMenu.addItem(popUpMenuItemByNote);
				} 
				
				isSelected = false;
				
			}
			
			private function doPopDataPoint(e:ChartItemEvent, domain:String):void {
				
				this.domain = domain;
				
				doDynamicMenu(null);
				popUpMenu.display(this.stage, e.stageX, e.stageY);
				
			}
			
			
			private function addTab(lbl:String, item:Object, groupBy:String, navigator:SuperTabNavigator, 
																			 contentString:String=null, icon:Class=null):void
			{
				if (lbl == "")
					lbl = "Graph";
				
				var curNum:Number = nav.numChildren + 1;
				
				var child:VBox = new VBox();
				
				child.setStyle("closable", true);
				
				child.label = lbl + " @ " + this.parentApplication.selectedYMLabel;
				//add to report using var "lbl" as "Before Patient"
				//add to report using "groupBy" as "By Ward/Facility"
				
				//var reportType:String = "";
				//trace("item: " + item);
				//trace("groupBy: " + groupBy);
				
				//define the group by category
				var categoryField:String = "";
				if(groupBy==Constants.FILTER_MENU_ENV_AREA){
					categoryField = "area";
				} else if(groupBy==Constants.FILTER_MENU_ENV_WARDFACILITY){
					categoryField = "dept";
				} else if(groupBy==Constants.FILTER_MENU_ENV_METHOD){
					categoryField = "methodName";
				} else if(groupBy==Constants.FILTER_MENU_ENV_CATEGORY){
					categoryField = "category";
				} else if(groupBy==Constants.FILTER_MENU_ENV_ITEM){
					categoryField = "item";
				} else if(groupBy==Constants.FILTER_MENU_ENV_NOTE){
					categoryField = "note";
				}
				//end define the group by category
				
				
				if (icon)
				{
					child.icon = icon;
				}
				else
				{
					child.icon = document_icon;
				}
				
				var headerGroup:Group = new Group();
				headerGroup.percentWidth=100;
				
				var label:Label = new Label();
				label.text = contentString == null ? lbl : contentString; //for the new tab label
				label.setStyle("fontWeight", "bold");
				label.x=10;
				label.y=10;
				
				
				var ca:ColumnChart = new ColumnChart(); //1st chart column
				var caComp:ColumnChart = new ColumnChart(); //2nd chart column
				
				var iSelect:Number = -1;
				
				var dlstMonth:DropDownList = new DropDownList();
				dlstMonth.width = 180;
				dlstMonth.right = 40;
				dlstMonth.y = 5;
				dlstMonth.dataProvider = this.parentApplication.yearMonthXML;
				dlstMonth.labelField="@label";
				dlstMonth.prompt = "Year/Month...";
				//dlstMonth.selectedIndex = 0;
				//dlstMonth.addEventListener(IndexChangeEvent.CHANGE, function(event:IndexChangeEvent):void{doChangeMonthTab(event, ca, caComp, domain, groupBy, item, child)}); //child is the TAB BAR label VBox object
				
				
				//new add to report function by alfred 2015-06-27
				var imgAddReport:Image = new Image();
				imgAddReport.source = "asset/images/report_up.png";
				//asset/images/report_up.png
				imgAddReport.smooth = true;
				imgAddReport.right = 10;
				imgAddReport.y = 5;
				//imgAddReport.addEventListener(MouseEvent.CLICK, function(event:MouseEvent):void{doAddToReportMenu(event, lbl, domain, groupBy, item)});
				//end new add to report function by alfred
				
				//trace("...y/m tracing...");
				//dlstMonth.selectedItem = this.parentApplication.selectedYM;
				
				for each (var node : XML in this.parentApplication.yearMonthXML){
					trace("compare: " + node.@value + " vs " + this.parentApplication.selectedYM);
					iSelect++;
					if(node.@value==this.parentApplication.selectedYM){
						dlstMonth.selectedIndex = iSelect;
						break;
					}
				}
				//trace(node.@label);
				//trace(node.@value);
				//for each (var subnode : XML in node.alt_form) {
				//if (subnode.@name != null) {
				//trace(subnode.@name + " is my list SUB item name");
				//}
				//}
				//}
				
				//t1.addEventListener(MouseEvent.CLICK, function(me:MouseEvent):void{ gotoImage(me, 1)});
				
				
				//change="btnYM_changeHandler(event)"
				
				
				
				var lblProgress:Label = new Label();
				//lblProgress.text = "Quota Progress:";
				lblProgress.y=10;
				lblProgress.right=280;
				
				/*
				<s:Button y="10" right="130" label="Button"/>
				<s:Button x="10" y="10" label="Button"/>
				<s:DropDownList y="10" right="10"></s:DropDownList>
				*/
				
				headerGroup.addElement(label);
				headerGroup.addElement(dlstMonth);
				headerGroup.addElement(imgAddReport);
				headerGroup.addElement(lblProgress);
				
				//child.addChild(label);
				child.addChild(headerGroup);
				
				var bc:BorderContainer = new BorderContainer();
				bc.percentHeight=100;
				bc.percentWidth=100;
				
				ca.seriesFilters=[]; //no shadow
				ca.showDataTips = true;
				//type="stacked"
				//ca.type="stacked";
				ca.type="overlaid";
				
				var cAxis:CategoryAxis = new CategoryAxis();
				cAxis.categoryField=categoryField;
				ca.horizontalAxis = cAxis;
				
				
				var cs:ColumnSeries = new ColumnSeries(); //for "cnt" => complaince count
				//fill function
				cs.fillFunction=this.parentApplication.stackedFillFunctionEnv;
				cs.setStyle("fontSize", 20);
				cs.setStyle("labelAlign", "top");
				cs.setStyle("labelPosition", "outside");
				//cs.fillFunction = fillFunction;
				cs.displayName = categoryField;
				cs.yField = "cnt";
				cs.setStyle("showDataEffect", slideUp);
				// showDataEffect="slideUp" 
				
				var csOpp:ColumnSeries = new ColumnSeries(); //for "opp" => opportunity count
				//fill function
				csOpp.fillFunction=this.parentApplication.stackedFillFunctionEnv;
				csOpp.setStyle("fontSize", 20);
				csOpp.setStyle("labelAlign", "top");
				csOpp.setStyle("labelPosition", "outside");
				//cs.fillFunction = fillFunction;
				csOpp.displayName = categoryField;
				csOpp.yField = "ttl";
				
				var seriesArray:Array = new Array();
				
				//if(groupBy!="By Action"){
				seriesArray.push(csOpp); //opportunity column
				//}
				
				seriesArray.push(cs); //complaince column
				
				ca.series = seriesArray;
				
				//if(groupBy!="By Action"){
				ca.y=10;
				ca.left=10;
				ca.right=10;
				ca.height=260
				/*} else {
				ca.percentWidth=100;
				ca.percentHeight=100;
				}*/
				
				
				caComp.seriesFilters=[]; //no shadow
				var cAxisComp:CategoryAxis = new CategoryAxis();
				cAxisComp.categoryField = categoryField;
				caComp.horizontalAxis = cAxisComp;
				
				//<mx:verticalAxis>
				//<mx:LinearAxis id="vAxis2"
				//   minimum="0"
				//   maximum="100"
				//  labelFunction="linearAxis_labelFunc" />
				//</mx:verticalAxis>
				var lAxisComp:LinearAxis = new LinearAxis();
				lAxisComp.minimum=0;
				lAxisComp.maximum=100;
				lAxisComp.labelFunction=linearAxis_labelFunc;
				
				caComp.verticalAxis=lAxisComp;
				
				var csComp:ColumnSeries = new ColumnSeries();
				csComp.setStyle("fontSize", 20);
				csComp.setStyle("labelAlign", "top");
				csComp.setStyle("labelPosition", "outside");
				csComp.fillFunction = fillFunction;
				csComp.displayName = categoryField;
				csComp.yField = "pect";
				var seriesArrayComp:Array = new Array();
				
				
				
				//if(groupBy!="By Action"){
				//add benchmark line
				var lineSeries:LineSeries = new LineSeries();
				lineSeries.yField="Y";
				lineSeries.xField="X";
				lineSeries.setStyle("lineStroke", this.parentApplication.lineStroke);
				lineSeries.dataProvider = this.parentApplication.lineDataProvider;
				var xAxis:LinearAxis = new LinearAxis();
				xAxis.maximum=1;
				lineSeries.horizontalAxis = xAxis;
				seriesArrayComp.push(lineSeries);
				//end add benchmark line
				
				//csComp.setStyle("itemRenderer", this.parentApplication.colorColumnRenderer);
				csComp.fillFunction=this.parentApplication.fill3ColorFunction;
				//}
				
				
				
				
				seriesArrayComp.push(csComp);
				caComp.series = seriesArrayComp;
				//caComp.percentWidth=100;
				//caComp.y = systemManager.screen.height/2;
				//trace("Y NEW caComp Chart " + String(systemManager.screen.height/2));
				
				caComp.y=270;
				caComp.left=10;
				caComp.right=10;
				caComp.height=260;
				
				/*<mx:ColumnChart id="chartAnalytic" x="89" y="20" width="456" height="241" dataProvider="{jsonAnalytic}">
				
				<mx:horizontalAxis>
				<mx:CategoryAxis categoryField="cat"/>
				</mx:horizontalAxis>		
				<mx:series>
				<mx:ColumnSeries fontSize="16" 
				fillFunction="{fillFunction}"
				fills="{this.parentApplication.themeColor}" displayName="cat" yField="cnt" labelAlign="top" labelPosition="outside" showDataEffect="slideUp" />
				</mx:series>
				
				</mx:ColumnChart>*/
				
				trace("domain: " + domain);
				var erc:EnvReportController = new EnvReportController();
				if(domain==Constants.DOMAIN_ENV_AREA){
					if(groupBy==Constants.FILTER_MENU_ENV_WARDFACILITY){
						ca.dataProvider = erc.doAnalyticComplianceByWardFacility(this.parentApplication.selectedYM, domain, hitItem.areaId);  
					} else if(groupBy==Constants.FILTER_MENU_ENV_METHOD){
						ca.dataProvider = erc.doAnalyticComplianceByMethod(this.parentApplication.selectedYM, domain, hitItem.areaId);
					} else if(groupBy==Constants.FILTER_MENU_ENV_CATEGORY){
						ca.dataProvider = erc.doAnalyticComplianceByCategory(this.parentApplication.selectedYM, domain, hitItem.areaId);
					} else if(groupBy==Constants.FILTER_MENU_ENV_ITEM){
						ca.dataProvider = erc.doAnalyticComplianceByItem(this.parentApplication.selectedYM, domain, hitItem.areaId);
					} else if(groupBy==Constants.FILTER_MENU_ENV_NOTE){
						ca.dataProvider = erc.doAnalyticComplianceByDeficiencyNote(this.parentApplication.selectedYM, domain, hitItem.areaId);
					}
				}
				
				bc.addElement(ca); //For Opporunity (optional) vs Cnt (compliance) chart
				
				caComp.dataProvider = ca.dataProvider;
				bc.addElement(caComp);
	
				child.addChild(bc);
				
				navigator.addChild(child);
			}
			

			private function initTabs():void
			{
				nav.setClosePolicyForTab(0, SuperTab.CLOSE_NEVER);
			}
			
			
			
			public function fetchLocalXML():void{
				
				initMenu();
				
				//dec env raw .shard file
				
				var erc:EnvReportController = new EnvReportController();
				var acChartData:ArrayCollection = erc.doAnalyticComplianceByArea(this.parentApplication.selectedYM);
				
				//Chart #1 - opp by area + overall
				chtOppArea.dataProvider = acChartData;
				
				//Chart #2 - compliance by area + overall 
				cht.dataProvider = acChartData;
				
				
				
			}
			
			
			public function myListener(e:ChartItemEvent, domain:String):void {
				
				if(domain==Constants.DOMAIN_ENV_AREA){
					this.hitItem  = e.hitData.item;
					trace("hitData: " + e.hitData.item.areaId); //area
					
					if(e.hitData.item.areaId!=-1){ //overall column chart
						doPopDataPoint(e, domain);
					}
				}
				
			}
			
			
			private function linearAxis_labelFunc(item:Object, prevValue:Object, axis:IAxis):String {
				return item + "%"
			}
			
			private function fillFunction (item:ChartItem, index:Number):IFill
			{
				var csi:ColumnSeriesItem = ColumnSeriesItem(item);
				
				if(csi.item.cat == "Overall Adherence")
				{
					return new SolidColor(0xe48701);
				} else {
					//return new SolidColor(0xFF0000);
					return this.parentApplication.themeColor[index];
				}
			}
			
		]]>
	</fx:Script>	
	
	
	
	<flexlib:SuperTabNavigator id="nav" x="0" y="0" width="100%" height="100%" cornerRadius="4"
							   closePolicy="{SuperTab.CLOSE_ROLLOVER}" horizontalGap="0"
							   scrollSpeed="25" startScrollingEvent="{MouseEvent.MOUSE_DOWN}"
							   stopScrollingEvent="{MouseEvent.MOUSE_UP}">
		
		<s:NavigatorContent width="100%" height="100%" label=" " icon="{home_icon}">

			
			<s:BorderContainer id="pnl" x="0" y="0" width="100%" height="100%" borderColor="#FFFFFF">
		
				<mx:ColumnChart id="cht" y="331" left="10" right="10" height="266"
								itemClick="myListener(event, Constants.DOMAIN_ENV_AREA)"
								seriesFilters="[]" showDataTips="false">
					<mx:verticalAxis>
						<mx:LinearAxis id="vAxis3"
									   minimum="0"
									   maximum="100"
									   labelFunction="{this.parentApplication.linearAxis_labelFunc}"/>
					</mx:verticalAxis>
					<mx:horizontalAxis>
						<mx:CategoryAxis categoryField="area"/>
					</mx:horizontalAxis>
					<mx:series>
						
						<!--for benchmark line-->
						<mx:LineSeries yField="Y" xField="X"
									   lineStroke="{this.parentApplication.lineStroke}"
									   dataProvider="{this.parentApplication.lineDataProvider}">
							<mx:horizontalAxis>
								<mx:LinearAxis maximum="1"/>
							</mx:horizontalAxis>
						</mx:LineSeries>
						<!--end for benchmark line-->
						
						<!-- itemRenderer="{this.parentApplication.colorColumnRenderer}"-->
						<mx:ColumnSeries fontSize="16" 
										 fillFunction="{this.parentApplication.fill3ColorFunction}"
										 fills="{this.parentApplication.themeColor}" 
										 displayName="area" yField="pect" labelAlign="top" 
										 labelPosition="outside" showDataEffect="slideUp" />
						
					</mx:series>
					
				</mx:ColumnChart>
				<mx:ColumnChart id="chtOppArea" y="20" left="10" right="10" height="282"
								itemClick="myListener(event, Constants.DOMAIN_ENV_AREA)"
								type="overlaid" showDataTips="true" 
								seriesFilters="[]">
			<!--xmlDataWardFacilityCnt have change from this-->
					
					<mx:verticalAxis>
						<mx:LinearAxis id="vAxis" minimum="0"/>
					</mx:verticalAxis>
					
					<mx:horizontalAxis>
						<mx:CategoryAxis id="hAxis" categoryField="area"/>
					</mx:horizontalAxis>
					
					<!--fills="{this.parentApplication.themeColor}"-->
					<mx:series>
						<mx:ColumnSeries fontSize="16"  displayName="area" yField="cnt" 
										 fillFunction="{this.parentApplication.stackedFillFunctionEnv}"
										 labelAlign="top" labelPosition="outside" showDataEffect="slideUp" />
						
						<mx:ColumnSeries fontSize="16"  displayName="area" yField="ttl"
										 fillFunction="{this.parentApplication.stackedFillFunctionEnv}"
										 labelAlign="top" labelPosition="outside" showDataEffect="slideUp" />
					</mx:series>
					
					
					
					<mx:horizontalAxisRenderers>
						<comp:ScrollableAxisRenderer axis="{hAxis}" id="scrollAxis" tickPlacement="none" placement="bottom"
													 labelGap="3" maxVisibleColumns="12"  scrollBarThemeColor="blue" />
					</mx:horizontalAxisRenderers>
					
				</mx:ColumnChart>
				<s:Label y="0" fontWeight="bold" horizontalCenter="0" text="Opportunity By Area"/>
				<s:Label y="314" fontWeight="bold" horizontalCenter="0" text="Compliance By Area"/>
				
				<s:Image id="btnAddReport" y="-2" right="10"
						 click="doAddToReportMenu(event, SemmelReport.EnvComplianceByArea)" smooth="true"
						 smoothingQuality="high" source="@Embed('../../asset/images/report_up.png')"/>
				
				<!-- Horizontal Chart -->

			</s:BorderContainer>
			
		</s:NavigatorContent>
	</flexlib:SuperTabNavigator>		
		
</s:NavigatorContent>