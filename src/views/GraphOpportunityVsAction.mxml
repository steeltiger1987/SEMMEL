<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent 
	xmlns:flexlib="flexlib.containers.*"
	xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					width="100%" height="660" creationComplete="fetchLocalXML()">
	
	<fx:Style>
		@namespace tab "flexlib.controls.tabBarClasses.*";
		tab|SuperTab{ 
			tabCloseButtonStyleName:"SuperTabButtonStyle"; 
		} 
		.SuperTabButtonStyle{
			icon: Embed(source="close.png"); 
		}
	</fx:Style>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:SeriesSlide id="slideUp" duration="1000" direction="up"/>
		<mx:SolidColor id="sc1" color="0x1f77b4" />
		<mx:SolidColor id="sc2" color="0xff7f0e" />
	</fx:Declarations>
	
	
	<fx:Script>
		<![CDATA[
			
			import com.security.util.AESCrypto;
			import com.semmel.Constants;
			
			import spark.events.PopUpEvent;
			import mx.managers.PopUpManager;
			import mx.collections.*;
			import com.report.bi.*;
			import spark.components.Image;
			
			import flash.display.NativeMenu;
			import flash.display.NativeMenuItem;
			import mx.charts.events.ChartItemEvent;
			import mx.containers.VBox;
			
			import flexlib.containers.SuperTabNavigator;
			import flexlib.controls.SuperTabBar;
			import flexlib.controls.tabBarClasses.SuperTab;
			import flexlib.events.TabReorderEvent;
			
			import flash.display.NativeMenu;
			import flash.display.NativeMenuItem;
			import mx.charts.events.ChartItemEvent;
			import mx.containers.VBox;
			
			import flexlib.containers.SuperTabNavigator;
			import flexlib.controls.SuperTabBar;
			import flexlib.controls.tabBarClasses.SuperTab;
			import flexlib.events.TabReorderEvent;
			
			import mx.charts.series.ColumnSeries;
			import mx.charts.series.items.ColumnSeriesItem;
			import mx.charts.ChartItem;
			import mx.charts.chartClasses.Series;
			import mx.charts.chartClasses.IAxis;
			import mx.utils.ObjectUtil;
			import mx.graphics.SolidColor;
			
			
			[Bindable]
			private var xmlColumnChart2 : XMLList;
			
			[Bindable]
			private var xmlColumnChart : XMLList;
			
			
			[Embed(source="../../assets/document.png")]
			private var document_icon:Class;       
			
			[Embed(source="../../assets/home.png")]
			private var home_icon:Class;
			
			protected function horizontalLabelFunction(value:Object, pre:Object, axis:Object, item:Object):Object 
			{
				return item.@hr;
			}
			
			public function fetchLocalXML():void{
				
				initMenu();
				
				if(this.parentApplication.fetchXMLData!=""){
					try{
						
						var raw:String = "";
						var s:String = "";
						var file:File = File.applicationStorageDirectory.resolvePath("report_" + Constants.getHospitalId() + "_" + this.parentApplication.selectedYM + ".shard");
						if(file.exists){
							try{
								var stream:FileStream = new FileStream()
								stream.open(file, FileMode.READ);
								raw = stream.readUTFBytes(stream.bytesAvailable).toString();
								stream.close();
								
								
								//start decrypt here
								//s = AESCrypto.decrypt(raw, Constants.getLicenseKey().substring(0,16));
								//AESCrypto.decrypt(raw, Constants.getLicenseKey().substring(0,16))
								//doDecrypt
								
								
								s = raw;// "<?xml version=\"1.0\" encoding=\"UTF-8\"?><report>" + AESCrypto.decrypt(raw, Constants.getLicenseKey().substring(0,16)) + "</report>";
								trace("dec: " + s);
								
							}catch(e:Error){
								trace("e: " + e.toString());
							}
						}
						
						
						var xml:XML = new XML(s);
						
						if(this.parentApplication.selectedYM!=""){
							
							//var ob:String = this.parentApplication.selectedObserver + "_" + this.parentApplication.selectedYM;
							var ob:String = this.parentApplication.selectedYM;
							
							
							this.xmlColumnChart = new XML(s).indication.(@ob==ob).indi;
							this.xmlColumnChart2 = new XML(s).pindication.(@ob==ob).pindi;
						}
						
					}catch(error:Error){
						trace("Err: " + error.toString());
					}
				}
			}
			
			//new function for open tabs
			private function initTabs():void
			{
				nav.setClosePolicyForTab(0, SuperTab.CLOSE_NEVER);
			}
			
			public function myListener(e:ChartItemEvent):void {
				//ti1.text = e.hitData.item.expenses;
				//ti2.text = String(e.hitData.x) + ", " + String(e.hitData.y);
				trace("hitData: " + e.hitData.item.cat); //for the 5 moments...
				trace("hitData: " + e.hitData.item.cnt); //for its 5 moments count!
				
				doPopDataPoint(e);
				
			}
			
			private var popUpMenu = new NativeMenu();
			private var popUpMenuItemByProf = new NativeMenuItem("By Professional");
			private var popUpMenuItemByDept = new NativeMenuItem("By Ward/Facility");
			private var popUpMenuItemByMoment = new NativeMenuItem("By Moment");
			private var popUpMenuItemByAction = new NativeMenuItem("By Action");
			private var hitItem:String = "";
			
			private function initMenu():void{
				popUpMenuItemByProf.addEventListener(Event.SELECT, function(e:Event):void{
					doAnalysisByDataPoint(e, hitItem);
				});
				popUpMenuItemByDept.addEventListener(Event.SELECT, function(e:Event):void{
					doAnalysisByDataPoint(e, hitItem);
				});
				popUpMenuItemByMoment.addEventListener(Event.SELECT, function(e:Event):void{
					doAnalysisByDataPoint(e, hitItem);
				});
				popUpMenuItemByAction.addEventListener(Event.SELECT, function(e:Event):void{ 
					doAnalysisByDataPoint(e, hitItem);
				});
			}
			
			var isSelected:Boolean = false;
			
			private function doAnalysisByDataPoint(event:Event, hitItem:String):void{
				if(isSelected==false){
					trace("Selected command: " + hitItem + " " + event.target.label);
					isSelected = true;
					
					addTab(hitItem + " " + event.target.label, hitItem, event.target.label, nav);
					nav.selectedIndex = nav.getChildren().length-1;
					
				}
				//mx.controls.Alert.show("i");
			}
			
			private function doDynamicMenu(obj:Object):void{
				//trace("obj.id " + obj.id);
				
				//if(obj id)
				popUpMenu.removeAllItems();
				popUpMenu.addItem(popUpMenuItemByDept);
				popUpMenu.addItem(popUpMenuItemByProf);
				popUpMenu.addItem(popUpMenuItemByAction);
				isSelected = false;
				
			}
			
			private function doPopDataPoint(e:ChartItemEvent):void {
				
				hitItem = e.hitData.item.cat;
				doDynamicMenu(null);
				popUpMenu.display(this.stage, e.stageX, e.stageY);
				
				//trace("hit1");
				//popMenu.display(this.stage, e.stageX, e.stageY);
				//trace("hit2");
				/*trace("hit: " + e.hitData.item.cat);
				myMenu = new FlexNativeMenu(); 
				myMenu.dataProvider = menuData; 
				myMenu.labelField = "@label"; 
				myMenu.showRoot = false; 
				myMenu.setContextMenu(columnchart2);
				
				myMenu.display(this.stage, e.localX, e.localY);*/
				
			}
			
			private function addTab(lbl:String, item:String, groupBy:String, navigator:SuperTabNavigator, 
															 contentString:String=null, icon:Class=null):void
			{
				if (lbl == "")
					lbl = "Graph";
				
				var curNum:Number = nav.numChildren + 1;
				
				var child:VBox = new VBox();
				
				child.setStyle("closable", true);
				
				child.label = lbl + " @ " + this.parentApplication.selectedYMLabel;
				
				if (icon)
				{
					child.icon = icon;
				}
				else
				{
					child.icon = document_icon;
				}
				var label:Label = new Label();
				label.text = contentString == null ? "Content for: " + lbl : contentString;
				
				child.addChild(label);
				
				var bc:BorderContainer = new BorderContainer();
				bc.percentHeight=100;
				bc.percentWidth=100;
				var ca:ColumnChart = new ColumnChart();
				var cAxis:CategoryAxis = new CategoryAxis();
				cAxis.categoryField="cat";
				ca.horizontalAxis = cAxis;
				var cs:ColumnSeries = new ColumnSeries();
				cs.setStyle("fontSize", 20);
				cs.setStyle("labelAlign", "top");
				cs.setStyle("labelPosition", "outside");
				//cs.fillFunction = fillFunction;
				cs.displayName = "cat";
				cs.yField = "cnt";
				var seriesArray:Array = new Array();
				seriesArray.push(cs);
				ca.series = seriesArray;
				
				//if(groupBy!="By Action"){
				ca.y=10;
				ca.left=10;
				ca.right=10;
				ca.height=260
				/*} else {
				ca.percentWidth=100;
				ca.percentHeight=100;
				}*/
				
				var caComp:ColumnChart = new ColumnChart();
				var cAxisComp:CategoryAxis = new CategoryAxis();
				cAxisComp.categoryField = "cat";
				caComp.horizontalAxis = cAxisComp;
				
				//<mx:verticalAxis>
				//<mx:LinearAxis id="vAxis2"
				//   minimum="0"
				//   maximum="100"
				//  labelFunction="linearAxis_labelFunc" />
				//</mx:verticalAxis>		
				var lAxisComp:LinearAxis = new LinearAxis();
				lAxisComp.minimum=0;
				lAxisComp.maximum=100;
				lAxisComp.labelFunction=linearAxis_labelFunc;
				
				caComp.verticalAxis=lAxisComp;
				
				var csComp:ColumnSeries = new ColumnSeries();
				csComp.setStyle("fontSize", 20);
				csComp.setStyle("labelAlign", "top");
				csComp.setStyle("labelPosition", "outside");
				//csComp.fillFunction = fillFunction;
				csComp.displayName = "cat";
				csComp.yField = "pect";
				var seriesArrayComp:Array = new Array();
				seriesArrayComp.push(csComp);
				caComp.series = seriesArrayComp;
				//caComp.percentWidth=100;
				//caComp.y = systemManager.screen.height/2;
				//trace("Y NEW caComp Chart " + String(systemManager.screen.height/2));
				
				caComp.y=270;
				caComp.left=10;
				caComp.right=10;
				caComp.height=260;
				
				/*<mx:ColumnChart id="chartAnalytic" x="89" y="20" width="456" height="241" dataProvider="{jsonAnalytic}">
				
				<mx:horizontalAxis>
				<mx:CategoryAxis categoryField="cat"/>
				</mx:horizontalAxis>		
				<mx:series>
				<mx:ColumnSeries fontSize="16" 
				fillFunction="{fillFunction}"
				fills="{this.parentApplication.themeColor}" displayName="cat" yField="cnt" labelAlign="top" labelPosition="outside" showDataEffect="slideUp" />
				</mx:series>
				
				</mx:ColumnChart>*/
				
				
				if(groupBy=="By Action"){
					
					if(item=="Before patient"){
						ca.dataProvider =  this.parentApplication.doAnalyticByAction("1", "2015-03");
					} else if(item=="Before aseptic"){
						ca.dataProvider =  this.parentApplication.doAnalyticByAction("2", "2015-03");
					} else if(item=="After body fluid"){
						ca.dataProvider =  this.parentApplication.doAnalyticByAction("3", "2015-03");
					} else if(item=="After patient"){
						ca.dataProvider =  this.parentApplication.doAnalyticByAction("4", "2015-03");
					} else if(item=="After patient surrounding"){
						ca.dataProvider =  this.parentApplication.doAnalyticByAction("5", "2015-03");
					}
					
				} else if(groupBy=="By Professional"){
					if(item=="Before patient"){
						ca.dataProvider = this.parentApplication.doAnalyticByProfessional("1", "2015-03");
					} else if(item=="Before aseptic"){
						ca.dataProvider = this.parentApplication.doAnalyticByProfessional("2", "2015-03");
					} else if(item=="After body fluid"){
						ca.dataProvider = this.parentApplication.doAnalyticByProfessional("3", "2015-03");
					} else if(item=="After patient"){
						ca.dataProvider = this.parentApplication.doAnalyticByProfessional("4", "2015-03");
					}  else if(item=="After patient surrounding"){
						ca.dataProvider = this.parentApplication.doAnalyticByProfessional("5", "2015-03");
					}
				} else if(groupBy=="By Ward/Facility"){
					if(item=="Before patient"){
						ca.dataProvider = this.parentApplication.doAnalyticByDepartment("1", "2015-03");
					} else if(item=="Before aseptic"){
						ca.dataProvider = this.parentApplication.doAnalyticByDepartment("2", "2015-03");
					} else if(item=="After body fluid"){
						ca.dataProvider = this.parentApplication.doAnalyticByDepartment("3", "2015-03");
					} else if(item=="After patient"){
						ca.dataProvider = this.parentApplication.doAnalyticByDepartment("4", "2015-03");
					}  else if(item=="After patient surrounding"){
						ca.dataProvider = this.parentApplication.doAnalyticByDepartment("5", "2015-03");
					}
				}
				
				bc.addElement(ca);
				//if(groupBy!="By Action"){				
				caComp.dataProvider = ca.dataProvider;
				bc.addElement(caComp);
				//}
				child.addChild(bc);
				
				navigator.addChild(child);
			}
			
			//end new function for open tabs

		]]>
	</fx:Script>

	<flexlib:SuperTabNavigator id="nav" x="0" y="0" width="100%" height="100%" cornerRadius="4"
							   closePolicy="{SuperTab.CLOSE_ROLLOVER}" horizontalGap="0"
							   scrollSpeed="25" startScrollingEvent="{MouseEvent.MOUSE_DOWN}"
							   stopScrollingEvent="{MouseEvent.MOUSE_UP}">
		
		<s:NavigatorContent width="100%" height="100%" label=" " icon="{home_icon}" creationComplete="initTabs()">
	
			<s:BorderContainer id="pnl" x="0" y="0" width="100%" height="100%" borderColor="#FFFFFF">
			
			<mx:ColumnChart id="columnchart1" y="10" left="10" right="7" height="346"
							dataProvider="{xmlColumnChart}"
							seriesFilters="[]">
				<mx:horizontalAxis>
					<mx:CategoryAxis categoryField="@cat"/>
				</mx:horizontalAxis>			
				<mx:series>
					<mx:ColumnSeries fontSize="16" fills="{this.parentApplication.themeColor}" displayName="@cat" yField="@cnt" labelPosition="outside" showDataEffect="slideUp"/>
				</mx:series>
			</mx:ColumnChart>
			<s:Label y="10" width="148" fontWeight="bold" horizontalCenter="39" text="Opportunity by Actions"/>
			<mx:ColumnChart id="columnchart2" y="364" left="10" right="8" height="252" 
							dataProvider="{xmlColumnChart2}"
							seriesFilters="[]">
				<mx:horizontalAxis>
					<mx:CategoryAxis categoryField="@cat"/>
				</mx:horizontalAxis>
				<mx:series>
					
					<!--for benchmark line-->
					<mx:LineSeries yField="Y" xField="X"
								   lineStroke="{this.parentApplication.lineStroke}"
								   dataProvider="{this.parentApplication.lineDataProvider}">
						<mx:horizontalAxis>
							<mx:LinearAxis maximum="1"/>
						</mx:horizontalAxis>
					</mx:LineSeries>
					<!--end for benchmark line-->
					
					<mx:ColumnSeries fontSize="16" fills="{this.parentApplication.themeColor}" 
									 itemRenderer="{this.parentApplication.colorColumnRenderer}"
									 displayName="@cat" yField="@cnt" labelPosition="outside" showDataEffect="slideUp"/>
				</mx:series>
			</mx:ColumnChart>

			<s:Label y="367" width="148" fontWeight="bold" horizontalCenter="39" text="Adherence by Actions"/>
				
				<s:Image id="btnAddReport_Action" y="-2" right="10"
						 click="doAddToReportMenu(event, SemmelReport.OppAdMoment)" smooth="true"
						 smoothingQuality="high" source="@Embed('asset/images/report_up.png')"/>
				
			</s:BorderContainer>
		</s:NavigatorContent>
		
	</flexlib:SuperTabNavigator>
</s:NavigatorContent>