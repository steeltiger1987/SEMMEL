<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					creationComplete="doLoadXMLData()"
					xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="660">
	
	<fx:Declarations>	
		<s:HTTPService id="httpReset" url="" fault="fleventReset(event)" method="POST" result="httpReset_result(event)" resultFormat="text" />
		<s:HTTPService id="httpReport" url="" fault="fleventReport(event)" method="POST" result="httpReport_result(event)" resultFormat="text" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.hurlant.crypto.hash.SHA1;
			import com.hurlant.util.Base64;
			import com.hurlant.util.Hex;
			import com.security.util.AESCrypto;
			import com.semmel.Constants;
			
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.xml.SimpleXMLDecoder;
			import mx.utils.object_proxy;
			import mx.utils.*;
			
			
			public var fetchXMLData:String = "";
			
			
			[Bindable]
			private var xmlDatagridWardFacility : XMLListCollection;
			
			[Bindable]
			private var xmlDatagridProfession : XMLListCollection;
			
			[Bindable]
			private var xmlDatagridObserverPerf : XMLListCollection;
			
			[Bindable]
			private var ProgressData : ArrayCollection = new ArrayCollection();
			public var xml:XML;
			public var xmlcollection:XMLListCollection;
			private function fleventReset(e:FaultEvent):void {
				trace("fault: " + e.toString());
				//btnAction.enabled=true;
				var alertNetwork:NetworkDialog = new NetworkDialog();
				alertNetwork.open(this, true);
				PopUpManager.centerPopUp(alertNetwork);
				alertNetwork.doMessage("ERROR", "HTTP Request Error");
			}
			private function fleventReport(e:FaultEvent):void {
				trace("fault report: " + e.toString());
				//btnAction.enabled=true;
			}	
			
			private function httpReset_result(evt:ResultEvent):void{		
				
				Alert.show("The reset was sucessfull");
				this.parentApplication.isReset = true;
				
				trace("posted data done");
				trace(evt.result.toString());
				
				var file:File = File.applicationStorageDirectory.resolvePath("license.key");
				var stream:FileStream = new FileStream()
				stream.open(file, FileMode.READ);
				var s:String = stream.readUTFBytes(stream.bytesAvailable).toString();
				
				trace("post doReport");
				
				httpReport.url = Constants.url_mapi;
				httpReport.method="POST";
				httpReport.send({act:"doReport", v:"2.0", key:s.split("\n")[0]});
				
			}
			
			private function httpReport_result(evt:ResultEvent):void{				
				trace("report posted data done");
				trace("need aes decrypt here...");
				
				//decryp key
				// 18fd975d3f27ff11
				
				/*trace("RETURN: " + evt.result.toString());
				
				var enc:String = StringUtil.trim(evt.result.toString());
				
				var file:File = File.applicationStorageDirectory.resolvePath("result.data");
				var fileStream:FileStream = new FileStream();
				fileStream.open(file, FileMode.WRITE);
				fileStream.writeUTFBytes(enc); //enc xml result data
				fileStream.close()*/
				
				
				doLoadXMLData();
				
			}
			
			public function doLoadXMLData():void{
				
				trace("do load xml data file storage");
				
				//Step1: load secret key first
				var sKey:String = ""; //test: 18fd975d3f27ff11
				var file:File = File.applicationStorageDirectory.resolvePath("license.key");
				if(file.exists){
					try{
						var stream:FileStream = new FileStream()
						stream.open(file, FileMode.READ);
						sKey = stream.readUTFBytes(stream.bytesAvailable).toString().substr(0, 16); //legnth 16 only
						stream.close();
					} catch(e:Error){
						trace(e.toString());
					}
					
				}
				
				var raw:String = "";
				var s:String = "";
				var file:File = File.applicationStorageDirectory.resolvePath("result.xml");
				if(file.exists){
					try{
						var stream:FileStream = new FileStream()
						stream.open(file, FileMode.READ);
						raw = stream.readUTFBytes(stream.bytesAvailable).toString();
						stream.close();
						
						
						//start decrypt here
						//s = AESCrypto.decrypt(raw, Constants.getLicenseKey().substring(0,16));
						//AESCrypto.decrypt(raw, Constants.getLicenseKey().substring(0,16))
						//doDecrypt
						
						
						s =raw;// "<?xml version=\"1.0\" encoding=\"UTF-8\"?><report>" + AESCrypto.decrypt(raw, Constants.getLicenseKey().substring(0,16)) + "</report>";
						trace("decs: " + s);
						
					}catch(e:Error){
						trace("e: " + e.toString());
					}
				}	
				trace("decs: " + s);
				var xmlData:XML = new XML(s);
				xmlcollection = new XMLListCollection(xmlData.deptprogress.dept);
				var strXML:String = xmlcollection.toXMLString();
				strXML = "<root>" + strXML + "</root>";
				xml = new XML(strXML);
				var xmlDoc:XMLDocument = new XMLDocument(xml);
				var decoder:SimpleXMLDecoder = new SimpleXMLDecoder(true);
				var resultObj:Object = decoder.decodeXML(xmlDoc);
				var acAllNodes:ArrayCollection = new ArrayCollection();
				if(resultObj.root.dept is ArrayCollection)
				{
					acAllNodes = resultObj.root.dept;
				}
				else if(resultObj.root.dept is Object)
				{
					acAllNodes.addItem(resultObj.root.dept);
				}
				var xmlParse:String = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root>";
				for(var i=0; i<acAllNodes.length; i++)
				{
					xmlParse +="<node label=\""+acAllNodes[i].dept_name;
					for(var k=0; k<(20-acAllNodes[i].dept_name.length)*2; k++)
					{
						xmlParse +=" ";
					}
					xmlParse +="Quota:"+acAllNodes[i].remaining+"       Progress("+acAllNodes[i].progress+"|"+acAllNodes[i].quota+")  "+(acAllNodes[i].progress/acAllNodes[i].quota*100).toFixed(2) +"%\">";
					var cnt = 0;
					trace("data:"+xmlData.deptprogress.dept[i].professionList[cnt].quota);
					for each(var acc in xmlData.deptprogress.dept[i].professionList)
					{
						if(xmlData.deptprogress.dept[i].professionList[cnt].is_group == false){
							xmlParse += "<node label=\""+xmlData.deptprogress.dept[i].professionList[cnt].prof_name+"        Quota:"+xmlData.deptprogress.dept[i].professionList[cnt].remaining+"       Progress("+xmlData.deptprogress.dept[i].professionList[cnt].progress+"|"+xmlData.deptprogress.dept[i].professionList[cnt].quota+")  "+(xmlData.deptprogress.dept[i].professionList[cnt].progress/xmlData.deptprogress.dept[i].professionList[cnt].quota*100).toFixed(2) +"%\">";
							xmlParse += "</node>";	
							cnt++;
						}
						else{
							xmlParse += "<node label=\""+xmlData.deptprogress.dept[i].professionList[cnt].prof_group_name+"        Quota:"+xmlData.deptprogress.dept[i].professionList[cnt].remaining+"       Progress("+xmlData.deptprogress.dept[i].professionList[cnt].progress+"|"+xmlData.deptprogress.dept[i].professionList[cnt].quota+")  "+(xmlData.deptprogress.dept[i].professionList[cnt].progress/xmlData.deptprogress.dept[i].professionList[cnt].quota*100).toFixed(2) +"%\">";
							var cnt1=0;
							for each(var acc1 in xmlData.deptprogress.dept[i].professionList[cnt].prof_list){
								xmlParse += "<node label=\""+xmlData.deptprogress.dept[i].professionList[cnt].prof_list[cnt1].prof_name+"        Quota:   -    "+"       Progress "+xmlData.deptprogress.dept[i].professionList[cnt].prof_list[cnt1].progress+"\">";
								xmlParse += "</node>";	
								cnt1++;								
							}
							xmlParse += "</node>";	
							cnt++;
						}
					}
					xmlParse +="</node>";
				}
				xmlParse +="</root>";
				trace("xmlParse:"+xmlParse);
				xml = new XML(xmlParse);
			}
			
			protected function btnReset_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				Alert.show("Are you sure want to RESET? All progress count data will be reset and cannot be undo.", "Reset",
					mx.controls.Alert.YES | mx.controls.Alert.NO, this, alertEventHandler);
			}
			
			protected function alertEventHandler(event:CloseEvent):void {
				if(event.detail == Alert.YES) {
					
					
					if(this.parentApplication.isConnected==false){
						trace("no connection");
						
						var alertNetwork:NetworkDialog = new NetworkDialog();
						alertNetwork.open(this, true);
						PopUpManager.centerPopUp(alertNetwork);
						
						alertNetwork.doMessage("Network Error", "Network Connection is Required");
						
						return;
					} else {
						
						
						
						var file:File = File.applicationStorageDirectory.resolvePath("license.key");
						var stream:FileStream = new FileStream()
						stream.open(file, FileMode.READ);
						var s:String = stream.readUTFBytes(stream.bytesAvailable).toString();
						
						trace("reset quota function");
						
						trace("license: " + s);
						
						trace("act: reset, key: " + s.split("\n")[0]);
						
						httpReset.url = Constants.url_mapi;
						httpReset.method="POST";
						httpReset.send({act:"reset", key:s.split("\n")[0]});
						
					}
				}
			}
			
		]]>
	</fx:Script>
	<s:Button id="btnReset" y="10" right="10" width="92" height="30" label="Reset"
			  chromeColor="#00A47B" click="btnReset_clickHandler(event)" color="#FFFFFF"
			  fontSize="14"/>
	<s:TabBar id="tabView" x="10" y="42" width="293" dataProvider="{tabvs}"/>
	<mx:ViewStack id="tabvs" left="10" right="10" top="65" height="586" backgroundColor="#FFFFFF"
				  borderAlpha="1.0" borderColor="#000000" borderVisible="true" cornerRadius="6"
				  dropShadowVisible="true">
		<s:NavigatorContent width="100%" height="100%" label="Ward/Facility">
			<mx:Tree id="tree" width="550" height="580"
					 dataProvider="{xml}"
					 showRoot="false"
					 labelField="@label"
					 />
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" label="Observer">
			<s:DataGrid x="8" top="17" bottom="13" width="550" dataProvider="{xmlDatagridObserverPerf}"
						requestedRowCount="4">
				<s:columns>
					<s:ArrayList>
						<s:GridColumn dataField="@observer" headerText="Observer" width="200"></s:GridColumn>
						<s:GridColumn dataField="@opp" headerText="Opportunity" width="100" itemRenderer="renderer.OppRenderer"></s:GridColumn>
					</s:ArrayList>
				</s:columns>
			</s:DataGrid>
		</s:NavigatorContent>
	</mx:ViewStack>
</s:NavigatorContent>